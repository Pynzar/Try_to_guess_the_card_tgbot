import telebot
from telebot.types import ReplyKeyboardMarkup
import time
from random import choice
from manual import game_manual, suits, number_card

secret_key = "6469799645:AAF3NE6vQ5dBpsCLB4FL-yNnId89Q3APtjU"
bot = telebot.TeleBot(secret_key)

storage = dict()


def init_storage(user_id):
    storage[user_id] = dict(rounds=None, counter_rounds=None, player_points=None)


def set_data_storage(user_id, key, value):
    storage[user_id][key] = value


def get_data_storage(user_id):
    return storage[user_id]


# –°—Ç–∞—Ä—Ç –∏–≥—Ä—ã
@bot.message_handler(commands=['start'])
def commands(message):
    markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add('–î–∞', '–ù–µ—Ç')
    if message.text == '/start':
        user_name = message.from_user.first_name
        bot_msg = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É, {user_name}!"
        bot.send_message(message.from_user.id, f'{bot_msg}')
        time.sleep(1)
        bot.send_message(message.from_user.id, f'–í—ã –≥–æ—Ç–æ–≤—ã –ø–æ–∏–≥—Ä–∞—Ç—å —Å–æ –º–Ω–æ–π?', reply_markup=markup)
        bot.register_next_step_handler(message, agreement_to_play)


@bot.message_handler(content_types=['text'])
# –°–æ–≥–ª–∞—Å–∏–µ –∏–≥—Ä–∞—Ç—å: –¥–∞ –∏–ª–∏ –Ω–µ—Ç
def agreement_to_play(message):
    markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add('–î–∞', '–ù–µ—Ç')
    msg = message.text.lower().strip()
    if msg not in ['–¥–∞', '–Ω–µ—Ç']:
        msg = bot.reply_to(message, f'–£–ø—Å!\n–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –º–Ω–µ —Å–∫–∞–∑–∞—Ç—å üòî \n'
                                    f'–î–∞–≤–∞–π—Ç–µ –ª—É—á—à–µ —Å—ã–≥—Ä–∞–µ–º?', reply_markup=markup)
        bot.register_next_step_handler(msg, agreement_to_play)

    if msg == '–¥–∞':
        msg = bot.reply_to(message, '–•–æ—Ç–µ–ª–∏ –±—ã –í—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã?', reply_markup=markup)
        bot.register_next_step_handler(msg, manual)
    elif msg == '–Ω–µ—Ç':
        bot.send_message(message.from_user.id, '–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –í—ã –Ω–µ –∑–∞—Ö–æ—Ç–µ–ª–∏ –∏–≥—Ä–∞—Ç—å!\n'
                                               '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤–≤–µ–¥–∏—Ç–µ "/start"')


# –í—ã–≤–æ–¥ –ø—Ä–∞–≤–∏–ª –ø–æ –ø—Ä–æ—Å—å–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def manual(message):
    markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    msg = message.text.lower().strip()
    if msg not in ['–¥–∞', '–Ω–µ—Ç']:
        msg = bot.reply_to(message, f'–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –º–Ω–µ —Å–∫–∞–∑–∞—Ç—å üòî \n'
                                    f'–•–æ—Ç–∏—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏?', reply_markup=markup)
        bot.register_next_step_handler(msg, manual)
        return
    markup.add('–õ—ë–≥–∫–∏–π', '–°–ª–æ–∂–Ω—ã–π')
    if msg == '–¥–∞':
        bot.send_message(message.from_user.id, f'{game_manual}\n{suits}\n{number_card}\n')
        time.sleep(1)
        bot.send_message(message.from_user.id, f'\n–ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –∏–≥—Ä–µ!')
        time.sleep(1)
        bot.send_message(message.from_user.id, f'–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã', reply_markup=markup)
        bot.register_next_step_handler(message, game_difficulty)
    elif msg == '–Ω–µ—Ç':
        bot.send_message(message.from_user.id, f'–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã', reply_markup=markup)
        bot.register_next_step_handler(message, game_difficulty)


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã
def random_card():
    card_number = ["6", "7", "8", "9", "10", "–í–∞–ª–µ—Ç", "–î–∞–º–∞", "–ö–æ—Ä–æ–ª—å", "–¢—É–∑"]  # –í—ã–±–æ—Ä –∫–∞—Ä—Ç—ã
    card_suit = ["–ß–µ—Ä–≤–∏", "–ë—É–±–∏", "–¢—Ä–µ—Ñ—ã", "–ü–∏–∫–∏"]  # –í—ã–±–æ—Ä –º–∞—Å—Ç–∏
    random_card_number = choice(card_number)  # –°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∞
    random_card_suit = choice(card_suit)  # –°–ª—É—á–∞–π–Ω–∞—è –º–∞—Å—Ç—å
    random_card = random_card_number + ' | ' + random_card_suit  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–≥–∞–¥–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞
    return [random_card_number, random_card_suit, random_card]


# –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
def game_difficulty(message):
    user_answer = message.text.lower().replace('—ë', '–µ').strip()
    init_storage(message.from_user.id)
    rounds = 3
    counter_rounds = 1  # –ü–æ–¥—Å—á—ë—Ç —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö —Ä–∞—É–Ω–¥–æ–≤
    player_points = 0  # –ü–æ–¥—Å—á—ë—Ç –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –æ—á–∫–æ–≤ –∑–∞ –ø–æ–ø–µ–¥—É
    set_data_storage(message.from_user.id, 'rounds', rounds)
    set_data_storage(message.from_user.id, 'counter_rounds', counter_rounds)
    set_data_storage(message.from_user.id, 'player_points', player_points)
    markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    if user_answer not in ['–ª–µ–≥–∫–∏–π', '—Å–ª–æ–∂–Ω—ã–π']:
        msg = bot.reply_to(message, f'–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –º–Ω–µ —Å–∫–∞–∑–∞—Ç—å üòî \n'
                                    f'–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏!', reply_markup=markup)
        bot.register_next_step_handler(msg, game_difficulty)
        return
    if user_answer == '–ª–µ–≥–∫–∏–π':
        bot.send_message(message.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏')
        time.sleep(1)
        bot.send_message(message.from_user.id, f'–í—ã –∏–≥—Ä–∞–µ—Ç–µ —Ä–∞—É–Ω–¥: {counter_rounds}')
        markup.add('üü•', '‚¨õÔ∏è')
        time.sleep(1)
        bot.send_message(message.from_user.id, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–≥–∞–¥–∞—Ç—å —Ü–≤–µ—Ç –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—É—é —è –∑–∞–≥–∞–¥–∞–ª',
                         reply_markup=markup)
        bot.register_next_step_handler(message, easy_game)
    elif user_answer == '—Å–ª–æ–∂–Ω—ã–π':
        bot.send_message(message.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—è–∂—ë–ª—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏')
        time.sleep(1)
        bot.send_message(message.from_user.id, f'–í—ã –∏–≥—Ä–∞–µ—Ç–µ —Ä–∞—É–Ω–¥: {counter_rounds}')
        markup.add("6", "7", "8", "9", "10", "–í–∞–ª–µ—Ç", "–î–∞–º–∞", "–ö–æ—Ä–æ–ª—å", "–¢—É–∑")
        bot.send_message(message.from_user.id, '–ö–∞–∫ –í—ã –¥—É–º–∞–µ—Ç–µ, –∫–∞–∫–∞—è —É –º–µ–Ω—è –∫–∞—Ä—Ç–∞?', reply_markup=markup)
        bot.register_next_step_handler(message, hard_game)


def easy_game(message):  # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–ª –ª—ë–≥–∫—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    correct_card = random_card()
    markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add('üü•', '‚¨õÔ∏è')

    rounds = get_data_storage(message.from_user.id)['rounds']
    counter_rounds = get_data_storage(message.from_user.id)['counter_rounds']
    player_points = get_data_storage(message.from_user.id)['player_points']

    if message.text.lower().replace('—ë', '–µ').strip() not in ['üü•', '‚¨õÔ∏è', '–∫—Ä–∞—Å–Ω—ã–π', '—á–µ—Ä–Ω—ã–π']:
        msg = bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç!', reply_markup=markup)
        bot.register_next_step_handler(msg, easy_game)
        return

    msg = message.text.lower().replace('—ë', '–µ').strip()
    if (msg == 'üü•' or msg == '–∫—Ä–∞—Å–Ω—ã–π') and correct_card[1] in ['–ß–µ—Ä–≤–∏', '–ë—É–±–∏']:
        counter_rounds += 1
        set_data_storage(message.from_user.id, 'counter_rounds', counter_rounds)
        player_points += 1
        set_data_storage(message.from_user.id, 'player_points', player_points)
        bot.send_message(message.from_user.id, f'–ú–æ–ª–æ–¥–µ—Ü!\n–í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–≥–∞–¥–∞–ª–∏ –º–æ—é –∫–∞—Ä—Ç—É!'
                                               f'\n–Ø –∑–∞–≥–∞–¥–∞–ª: {correct_card[2]}')
    elif (msg == '‚¨õÔ∏è' or msg == '—á–µ—Ä–Ω—ã–π') and correct_card[1] in ['–ü–∏–∫–∏', '–¢—Ä–µ—Ñ—ã']:
        counter_rounds += 1
        set_data_storage(message.from_user.id, 'counter_rounds', counter_rounds)
        player_points += 1
        set_data_storage(message.from_user.id, 'player_points', player_points)
        bot.send_message(message.from_user.id, f'–ú–æ–ª–æ–¥–µ—Ü!\n'
                                               f'–í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–≥–∞–¥–∞–ª–∏ –º–æ—é –∫–∞—Ä—Ç—É!\n–Ø –∑–∞–≥–∞–¥–∞–ª: {correct_card[2]}')
    else:
        counter_rounds += 1
        set_data_storage(message.from_user.id, 'counter_rounds', counter_rounds)
        bot.send_message(message.from_user.id, f'–£–ø—Å!\n–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏.\n–ú–æ—è –∫–∞—Ä—Ç–∞: {correct_card[2]}')
    if counter_rounds <= rounds:
        bot.send_message(message.from_user.id, f'–í—ã –∏–≥—Ä–∞–µ—Ç–µ —Ä–∞—É–Ω–¥: {counter_rounds}', reply_markup=markup)
        bot.register_next_step_handler(message, easy_game)
    elif counter_rounds > rounds:
        end_game(message)


def hard_game(message):  # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–ª —Ç—Ä—É–¥–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    rounds = get_data_storage(message.from_user.id)['rounds']
    counter_rounds = get_data_storage(message.from_user.id)['counter_rounds']
    player_points = get_data_storage(message.from_user.id)['player_points']
    correct_card = random_card()
    markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("6", "7", "8", "9", "10", "–í–∞–ª–µ—Ç", "–î–∞–º–∞", "–ö–æ—Ä–æ–ª—å", "–¢—É–∑")

    if message.text.lower().strip() not in ["6", "7", "8", "9", "10", "–≤–∞–ª–µ—Ç", "–¥–∞–º–∞", "–∫–æ—Ä–æ–ª—å", "—Ç—É–∑"]:
        msg = bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç!', reply_markup=markup)
        bot.register_next_step_handler(msg, hard_game)
        return
    msg = message.text.lower().strip()
    if msg == correct_card[0].lower():
        counter_rounds += 1
        set_data_storage(message.from_user.id, 'counter_rounds', counter_rounds)
        player_points += 1
        set_data_storage(message.from_user.id, 'player_points', player_points)
        bot.send_message(message.from_user.id, f'–ú–æ–ª–æ–¥–µ—Ü!\n–í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–≥–∞–¥–∞–ª–∏ –º–æ—é –∫–∞—Ä—Ç—É!\n'
                                               f'–Ø –∑–∞–≥–∞–¥–∞–ª: {correct_card[2]}')
    else:
        counter_rounds += 1
        set_data_storage(message.from_user.id, 'counter_rounds', counter_rounds)
        bot.send_message(message.from_user.id, f'–û—á–µ–Ω—å –∂–∞–ª—å! –í–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≥–∞–¥–∞—Ç—å.'
                                               f'\n–ú–æ—è –∫–∞—Ä—Ç–∞: {correct_card[2]}')
    if counter_rounds <= rounds:
        bot.send_message(message.from_user.id, f'–í—ã –∏–≥—Ä–∞–µ—Ç–µ —Ä–∞—É–Ω–¥: {counter_rounds}', reply_markup=markup)
        bot.register_next_step_handler(message, hard_game)
    elif counter_rounds > rounds:
        end_game(message)


# –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∏–≥—Ä–µ
def end_game(message):
    player_points = get_data_storage(message.from_user.id)['player_points']
    if player_points < 2:
        bot.send_message(message.from_user.id, f'–û—á–µ–Ω—å –∂–∞–ª—å!\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!')
    elif player_points == 2:
        bot.send_message(message.from_user.id, f'–ú–æ–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è!\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!')
    elif player_points == 3:
        bot.send_message(message.from_user.id, f'–í–∞–º –Ω–µ—Ç —Ä–∞–≤–Ω—ã—Ö!\n–í—ã –Ω–∞–±—Ä–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤!')
    time.sleep(1)
    bot.send_message(message.from_user.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –í–∞—à–∏—Ö –±–∞–ª–ª–æ–≤: {player_points}')
    time.sleep(1)
    markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add('–î–∞', '–ù–µ—Ç')
    bot.send_message(message.from_user.id, '–•–æ—Ç–µ–ª–∏ –±—ã –í—ã —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?', reply_markup=markup)
    bot.register_next_step_handler(message, agreement_to_play)


if __name__ == '__main__':
    bot.polling(none_stop=True, interval=2)
